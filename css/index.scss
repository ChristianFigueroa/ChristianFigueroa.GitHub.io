---
---
@import "fontawesome/fontawesome.scss";
@import "fontawesome/solid.scss";

{% include variables.scss %}

$name-line-h-count: 7;
$name-line-v-count: 41;
$name-char-path-count: 20;

$code-background: {{ site.style.color.code.background }};
$code-line-highlight: {{ site.style.color.code.lineHighlight }};

@keyframes stroke-in {
	from {
		stroke-dashoffset: 1px;
	}

	to {
		stroke-dashoffset: 0px;
	}
}

@keyframes stroke-in-out-50 {
	0% {
		stroke-dashoffset: 3px;
	}

	#{percentage(.5 / (2.4 + .5))} {
		stroke-dashoffset: 2px;
	}

	#{percentage(2.4 / (2.4 + .5))} {
		stroke-dashoffset: 2px;
	}

	100% {
		stroke-dashoffset: 1px;
	}
}

@keyframes stroke-in-out-75 {
	0% {
		stroke-dashoffset: 3px;
	}

	#{percentage(.75 / (2.4 + .75))} {
		stroke-dashoffset: 2px;
	}

	#{percentage(2.4 / (2.4 + .75))} {
		stroke-dashoffset: 2px;
	}

	100% {
		stroke-dashoffset: 1px;
	}
}

@keyframes fill-in {
	from {
		fill-opacity: 0;
	}

	to {
		fill-opacity: 1;
	}
}

@keyframes disappear {
	from {
		opacity: 1;
	}

	to {
		opacity: 0;
	}
}

body, html {
	background-color: $background-color;
	color: $text-color;
	min-height: 100%;
	font-family: $Roboto;
}

header {
	padding: 4rem 2rem 3rem;
	background-color: $accent-color;

	@media #{$mobile} {
		padding: 2rem .75rem 1.25rem;
	}
}

.external.link {
	@extend %fa-icon;
	@extend .fas;
	font-size: .7em;
	position: relative;
	top: -.2em;
	color: inherit;
	text-decoration: none;
	border-radius: 50%;
	padding: .4rem .4rem .5rem .5rem;
	margin: -.4rem -.4rem -.5rem #{-.5rem + .8rem};

	&:hover,
	&:focus {
		text-decoration: none;
		background-color: scale-color($code-background, $lightness: 15%);
	}

	&:before {
		content: fa-content($fa-var-external-link-alt);
	}
}

#name {
	font-family: $RobotoSlab;
	text-align: center;
	font-size: 4rem;
	margin: 0;
	font-weight: 700;
	line-height: 0;
}

#name-svg {
	width: 4.3rem / 12.424 * 106.273;
	max-width: 100%;
	vertical-align: middle;

	*[pathLength="1"] {
		stroke-dasharray: 1px;
	}

	// Makes each horizontal line have the same animation with a 75ms delay between them.
	// The order of the animations is randomized each time the stylesheet is compiled.
	line.h {
		$randomized: randomize-array(index-array($name-line-h-count));
		@for $i from 1 through $name-line-h-count {
			&:nth-of-type(#{nth($randomized, $i)}) {
				animation: #{2.4 + .75}s cubic-bezier(0.37, 0, 0.63, 1) #{($i - 1) * .075}s 1 normal both running stroke-in-out-75,
					0s linear #{(2.4 + .75) + (($i - 1) * .075)}s 1 normal both running disappear;
			}
		}
	}

	// Does the same thing for vertical lines.
	line.v {
		$randomized: randomize-array(index-array($name-line-v-count));
		@for $i from 1 through $name-line-v-count {
			&:nth-of-type(#{nth($randomized, $i) + $name-line-h-count}) {
				animation: #{2.4 + .5}s cubic-bezier(0.37, 0, 0.63, 1) #{($i - 1) * (.75 / $name-line-v-count)}s 1 normal both running stroke-in-out-50,
					0s linear #{(2.4 + .75) + (($i - 1) * (.75 / $name-line-v-count))} normal both running disappear;
			}
		}
	}

	path, rect {
		@for $i from 1 through $name-char-path-count {
			&:nth-child(#{$i + 1}) {
				animation: .75s cubic-bezier(0.61, 1, 0.88, 1) #{($i - 1) * .05 + .65}s 1 normal both running stroke-in,
					.5s cubic-bezier(0.37, 0, 0.63, 1) #{($i - 1) * .05 + 1.15}s 1 normal both running fill-in;
			}
		}
	}
}

#title {
	font-family: $RobotoSlab;
	font-size: 1.75rem;
	margin: .5rem 0 0;
	font-weight: 400;
	text-align: center;

	@media #{$mobile} {
		font-size: 1.3rem;
		margin: 0;
	}
}

#resume {
	margin-top: 1rem;
	font-weight: 300;

	h2 {
		font-family: $RobotoSlab;
		text-align: center;
		margin: 0;
		font-weight: 700;
		font-size: 3rem;
		margin: 0 0 2.5rem;

		@media #{$mobile} {
			font-size: 1.5rem;
			margin: 0 0 1rem;
		}
	}

	h3,
	h4 {
		@extend h2;
		font-size: 1.5rem;
		text-align: left;
		margin-bottom: .25rem;

		@media #{$mobile} {
			font-size: 1.2rem;
		}

		span.pipe {
			margin: 0 1rem;

			@media #{$mobile} {
				margin: 0 .5rem;
			}
		}
	}

	h4 {
		font-size: 1.1rem;
		font-weight: 400;
		margin-bottom: 0;
	}

	p {
		margin-bottom: 0;
		line-height: 1.5;
	}

	ul {
		@extend p;

		padding-left: 0;
		list-style-type: none;
		display: flex;
		flex-direction: column;
		flex-wrap: wrap;
		align-items: flex-start;

		li {
			position: relative;
			padding-left: 1.5em;
			min-width: calc(50% - 1.5em);

			@for $i from 0 through 9 {
				&:nth-child(#{$i}):before {
					content: "#{$i - 1}";
				}
				&:nth-child(#{$i}):after {
					content: "\00a0:";
				}
				&:nth-child(#{$i + 1}) {
					order: #{$i * 2};
				}
			}
			&:before,
			&:after {
				position: absolute;
				left: 0;
				top: 0;
				display: inline-block;
				font-family: Consolas, "Menlo Regular", monospace;
			}
			&:before {
				color: {{ site.style.color.code.purple }};
			}
		}
	}

	> section {
		padding: 2rem 0;

		@media #{$mobile} {
			padding: .75rem 0;
		}

		> * {
			@include body-width;
			max-width: calc(100% - 2rem);
		}

		section + section {
			margin-top: 2rem;
		}
	}

	> section:nth-child(2n) {
		background-color: $code-line-highlight;
	}

	> section:nth-child(2n + 1) {
		background-color: $code-background;
	}
}

#contact {
	@include body-width;
}

$contact-delay: 1;
.social-bar {
	display: flex;
	justify-content: space-around;
	line-height: 1.2;

	@media #{$mobile} {
		flex-direction: column;
	}
}

.social-link {
	flex-grow: 1;
	flex-shrink: 1;
	flex-basis: percentage(1/3);

	a {
		color: $text-color;
		line-height: 1;
		font-size: 1.25rem;
		display: flex;
		align-items: center;
		text-decoration: none;
		padding: 1.5rem 0;
		justify-content: center;
		transition: background-color .2s ease-in-out;

		@media #{$mobile} {
			font-size: 1rem;
			padding: .5rem;
		}

		&:hover,
		&:focus {
			background-color: scale-color($background-color, $lightness: 7%);
		}

		svg {
			height: 1.4em;
			margin-right: .5rem;
		}

		.hoverable {
			display: block;
			height: 1.4em;
		}

		.hovering,
		.nonhovering {
			width: 100%;
			text-align: center;
			display: flex;
			justify-content: center;
			align-items: center;
		}

		.hovering {
			text-decoration: underline;
		}

		&:hover {
			.hovering {
				transition: transform .21s .07s ease-in-out,
					opacity .18s .1s ease-in-out;
				transform: translateY(calc(-1.4em + (1.4em - 100%) / 2)) perspective(8rem) translateY(0) rotateX(0deg) scale(1);
				opacity: 1;
			}

			.nonhovering {
				transition: transform .21s 0s ease-in-out,
					opacity .18s 0s ease-in-out;
				transform: perspective(8rem) translateY(-50%) rotateX(90deg) scale(.95);
				opacity: 0;
			}
		}

		&:not(:hover) {
			.nonhovering {
				transition: transform .21s .07s ease-in-out,
					opacity .18s .1s ease-in-out;
				transform: perspective(8rem) translateY(0) rotateX(0deg) scale(1);
				opacity: 1;
			}

			.hovering {
				transition: transform .21s 0s ease-in-out,
					opacity .18s 0s ease-in-out;
				transform: translateY(calc(-1.4em + (1.4em - 100%) / 2)) perspective(8rem) translateY(50%) rotateX(-90deg) scale(.95);
				opacity: 0;
			}
		}
	}
}

.animated-text {
	fill: currentColor;
	stroke: currentColor;
	stroke-linecap: round;
	stroke-linejoin: round;
	stroke-width: .2px;

	> :not(text) {
		pointer-events: none;
	}

	text {
		fill: white;
		stroke: none;
		opacity: 0;
		alignment-baseline: middle;
		text-anchor: middle;
	}

	line {
		stroke-width: .2px;
		opacity: .75;
	}
}